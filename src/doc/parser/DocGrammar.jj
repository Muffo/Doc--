options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg1)package doc.parser;import java.io.*;import hierarchy.classes.*;import hierarchy.comments.*;import doc.visitor.*;

public class eg1{	public static ClassManager cm;	public static DocVisitor dv;	 	public static void main(String args []) throws ParseException  	{		if (args.length == 0) {			System.out.println("Usage: java -jar Doc++.jar header.h");			return;		}  				cm = ClassManager.getInstance();		dv = new HtmlVisitor(args[0] + "/doc");  		     	try {			eg1 parser = new eg1(new FileInputStream(args[0] + "/header.h"));		} catch (FileNotFoundException e1) {			e1.printStackTrace();			return;		}      	System.out.println("Reading from file...");      	try      	{        	eg1.header_files();        	cm.accept(dv);      	}      	catch (Exception e)      	{	        System.out.println("NOK.");	        System.out.println(e.getMessage());	        return;		}		catch (Error e)		{        	System.out.println("Oops.");        	System.out.println(e.getMessage());        	return;      	}      	System.out.println("Incredibilmente OK");  	}}PARSER_END(eg1)SKIP :{  " "| "\r"| "\t"| "\n"| "#" : PREPROCESSOR_DIRECTIVE}TOKEN :{	< POINTER_STARS : ("*")+ >| 	< DOT : "." >| 	< COLON: ":" >| 	< SEMICOLON: ";" >| 	< TILDE: "~" >| 	< COMMA: "," >| 	< CLASS: "class" >| 	< FRIEND: "friend" >| 	< PRIVATE: "private" >| 	< PROTECTED: "protected" >| 	< PUBLIC: "public" >| 	< CONST: "const" >| 	< STATIC: "static" >| 	< VIRTUAL: "virtual" >| 	< LEFT_PARENTHESIS: "(" >| 	< RIGHT_PARENTHESIS: ")" >| 	< START_COMMENT: "/*" > : IN_COMMENT}TOKEN :{  	< SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >| 	< IDENTIFIER : ([ "A"-"Z" ]|[ "a"-"z" ]|"_")(< ALPHANUM >|"_"|"::")* >| 	< OPERATOR_DEF : "operator"("+"|"-"|"*"|"/"|"||"|"&&")? >|	< DESTRUCTOR_DEF : < TILDE >< IDENTIFIER > >|  	< ALPHANUM : ([ "0"-"9" ]|[ "A"-"Z" ]|[ "a"-"z" ])+ >}<IN_COMMENT> SKIP :{ 	" "|	"\t"}<IN_COMMENT> TOKEN :{	< SHARP : "#" >|	< SEPARATOR :  ">" >|	< ATTRIBUTE_DEF : "@"([ "0"-"9" ]|[ "A"-"Z" ]|[ "a"-"z" ]|"_")+" ">|	< EMAIL_LINK : (< ALPHANUM >|"_"|".")+"@"(< ALPHANUM >|"_"|".")+ >|	< WEB_LINK : "http://"(< ALPHANUM >|"_"|":"|"/"|"."|"%"|"?"|"=")+ > // forse bisogna essere più liberi|	< FREE_TEXT : (< ALPHANUM >|"à"|"é"|"è"|"ì"|"ò"|"ù"|"_"|"-"|"."|","|"?"|":"|";"|"!"|"'")+>|	< STAR : "*" >|	< END_LINE : ("\n"|"\r"|"\r\n") >|	< END_COMMENT : "*/" > : DEFAULT}<PREPROCESSOR_DIRECTIVE> SKIP:{   "\n" : DEFAULT}<PREPROCESSOR_DIRECTIVE> MORE:{  "\\\n"  |  "\\\r\n"  |  < ~[] >}void header_files() :{}{	( documented_class() )+}void documented_class() :{	ClassDeclaration cd;	Comments c;}	{	c=comments() cd=class_declaration()	{		cd.setComments(c);	}}Comments comments() :{	Comments c; 	Token com;}{	(	  	com=< SINGLE_LINE_COMMENT >	  	{	  		c = new Comments();	  		c.addElement(new TextElement(com.image.substring(2).trim()));	  	}		| c = multi_line_comment()	)	{		return c;	}}Comments multi_line_comment() :{	Comments c = new Comments();	CommentElement ce;	Attribute a;	boolean isEmptyLine = true;	Token t;}{  	< START_COMMENT >	(		(< STAR >)*	  	(	  		t=< ATTRIBUTE_DEF >	  		{	  			a = new Attribute(t.image);	  			c.addAttribute(a);	  		}	  		(	  			ce = text_element()	  			{	  				a.addElement(ce);	  			}	  		)+ 	 	|	(	 			ce = text_element()	 			{	 				c.addElement(ce);	 				isEmptyLine = false;	 			}	 		)*	 			 	)	 	(	 		< END_LINE >	 		{	 			if (!isEmptyLine) {	 				c.addElement(new EndLineElement());	 			}	 				 			isEmptyLine = true;	 		}	 		| < END_COMMENT >			{ 				return c; 			}	 	)			 )*}CommentElement text_element() :{	Token com;	CommentElement ce;}{		(		com = < FREE_TEXT >		{			return new TextElement(com.image);		}	|	com = < EMAIL_LINK >		{			return new EmailLinkElement(com.image);		}	|	com = < WEB_LINK >		{			return new WebLinkElement(com.image);		}	|	ce = class_reference()		{			return ce;		}	)} CommentElement class_reference() :{	Token id, anc;	ClassRefElement cre;}{	< SHARP > id=< FREE_TEXT >	{		cre = new ClassRefElement(id.image);	}	(		< SEPARATOR > anc=< FREE_TEXT >		{			cre.setAnchor(anc.image);		}	)?	{			return cre;	}}ClassDeclaration class_declaration () :{ClassDeclaration c; Token id;}{  	< CLASS > id=< IDENTIFIER >  	{  		c = cm.getClassByName(id.image);  		cm.setActiveClass(c);  		  	}  	(parent_class())? "{" members_declaration() "}" (< SEMICOLON >)?   	{  		System.out.println(c);  		return c; 		  	}}void parent_class() :{Token t;}{  	":" t=< IDENTIFIER >  	{		cm.getActiveClass().addParent(t.image);  	}  	("," t=< IDENTIFIER >  		{			cm.getActiveClass().addParent(t.image);  		}  	)*}void members_declaration() :{}{  	(  	  	visibility_attribute() < COLON >  	| 	documented_member()  	)*} void visibility_attribute () :{}{  	"public"  	{  		cm.setVisibility(VisibilityAttribute.PUBLIC);  	}  	| "private"  	{  		cm.setVisibility(VisibilityAttribute.PRIVATE);  	}  	| "protected"  	{  		cm.setVisibility(VisibilityAttribute.PROTECTED);  	}  	}void documented_member () :{	Member m = null;	Comments c = null;}{   	(   		c = comments()  	)?  	(  		m=destructor_declaration()  	|	friend_class_declaration()  	 // 	|	virtual_func_declaration()  	|	LOOKAHEAD(2)  		m=constructor_declaration()   	| 	m=typed_declaration()   	)  	{		if (m != null)			m.setComments(c);  	}}void friend_class_declaration() :{Token id;}{  	< FRIEND > < CLASS > id=< IDENTIFIER > < SEMICOLON >  	{  		cm.getActiveClass().addFriend(id.image);  	}}Member typed_declaration() :{	boolean isStatic = false;	boolean isConst = false;	DataType dt;	Token id;	Function f;	Data d;}{  	(  		< STATIC >  		{			isStatic = true;  		}  	)?  	(  		< CONST >  		{			isConst = true;  		}  	)?  	dt=data_type()  	  	(  		f=operator_declaration(dt, isConst, isStatic)  		{  			return f;  		}	|	id=< IDENTIFIER >  		(  			f=function_declaration(id.image, dt, isConst, isStatic)  			{  				return f;  			}  			   		|	d=data_declaration(id.image, dt, isConst, isStatic)  			{  			 	return d;  			}  		)  	)}Function constructor_declaration() :{	Token id;	Function f;}{  	id=< IDENTIFIER >	{  		f = new Function(id.image, null, cm.getVisibility(), false, false);  		cm.getActiveClass().addConstructor(f);  	}  		  	< LEFT_PARENTHESIS > (arguments_list(f))? < RIGHT_PARENTHESIS > < SEMICOLON >  	{  		return f;  	}  	}Function destructor_declaration() :{	Token id;	Function f;}{  	id=< DESTRUCTOR_DEF > "(" ")" ";"  	{  		f = new Function(id.image, null, cm.getVisibility(), false, false);  		cm.getActiveClass().addDestructor(f);  		return f;  	}}Function operator_declaration(DataType dt, boolean isConst, boolean isStatic) :{	Token id;	Function f;}{	id=< OPERATOR_DEF >  	(< CONST >)?  	{  		f = new Function(id.image.substring(8), dt, cm.getVisibility(), isConst, isStatic);  		cm.getActiveClass().addOperator(f);  	}  	< LEFT_PARENTHESIS > (arguments_list(f))? < RIGHT_PARENTHESIS > < SEMICOLON >  	{		return f;  	}}Function function_declaration(String id, DataType dt, boolean isConst, boolean isStatic) :{	Function f;}{	< LEFT_PARENTHESIS >	 {	 	f = new Function(id, dt, cm.getVisibility(), isConst, isStatic);	 	cm.getActiveClass().addFunction(f);	 }	 (	 	arguments_list(f)	 )?	 < RIGHT_PARENTHESIS > (< CONST >)?  < SEMICOLON >	 {	 	return f;	 }}Data data_declaration(String id, DataType dt, boolean isConst, boolean isStatic) :{	Data d;	Token size;}{	{		d = new Data(id, dt, cm.getVisibility(), isConst, isStatic);		cm.getActiveClass().addData(d);	}	(		"[" ( size=< ALPHANUM > | size=< IDENTIFIER >) "]"		{			d.addArray("[" + size.image + "]");			}	 )* < SEMICOLON >	{		return d;	}}DataType data_type() :{	DataType dt;	Token t;	StringBuffer sb = new StringBuffer();}{	t = < IDENTIFIER >	{		sb.append(t.image);	}	(		"<" t=< IDENTIFIER > ">"		{			sb.append("<" + t.image + ">");		}	)?	(		t = < POINTER_STARS >		{			sb.append(t.image);		}	)?	(		"&"		{			sb.append("&");		}	)?	{		return new DataType(sb.toString());	}}void arguments_list (Function f) :{Data d;}{  	d=argument()  	{		f.addArgument(d);  	}  	(  		"," d=argument()  		{  			f.addArgument(d);  		}  	)*}Data argument () :{ Token id; DataType dt; Data d; boolean isConst = false;}{  	(  		< CONST >  		{  			isConst = true;  		}  	)? dt=data_type() id=< IDENTIFIER >  	{		d = new Data(id.image, dt);		d.setConst(isConst);		return d;  	}}
